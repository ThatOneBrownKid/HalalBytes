<%= form_with(model: [@restaurant, review], local: true, id: "review-form") do |form| %>
  <% if review.errors.any? %>
    <div class="error-messages">
      <h2><%= pluralize(review.errors.count, "error") %> prohibited this review from being saved:</h2>
      <ul>
        <% review.errors.full_messages.each do |error| %>
          <li><%= error %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <!-- Quill Editor -->
  <div>
    <%= form.label :content, "Write your review:", style: "display: block", class: "h5 pb-2" %>
    <div id="quill-editor" style="height: 150px;"></div> <!-- Quill editor container -->
    <%= form.hidden_field :content, id: "quill-content" %> <!-- Hidden input for the actual content -->
  </div>

  <!-- Star Rating -->
  <div class="form-group">
    <label for="rating" style="display: block" class="h5 pt-2">Rating:</label>
    <div id="star-rating" data-selected-rating="<%= review.rating || 0 %>">
      <% 1.upto(5) do |star| %>
        <i class="bi bi-star" data-value="<%= star %>" style="font-size: 2rem; cursor: pointer;"></i>
      <% end %>
    </div>
    <%= form.hidden_field :rating, id: "rating-input", value: review.rating || 0 %> <!-- Hidden input for rating -->
  </div>

  <!-- Submit Button -->
  <div class="pt-2 ">
    <%= form.submit "Submit Review", class: "submit-button btn btn-primary", disabled: true %>
  </div>

<div class="modal fade" id="dropzoneModal" tabindex="-1" aria-labelledby="dropzoneModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="dropzoneModalLabel">Upload Images</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mt-4">
          <div class="dropzone dropzone-default dz-clickable"
            data-controller="dropzone"
            data-dropzone-max-file-size="255"
            data-dropzone-accepted-files="image/*"
            data-dropzone-max-files="10"
            data-upload-multiple="true"
            id="review-dropzone">
            <%= form.file_field :images, multiple: true, direct_upload: true, 
                                  data: { dropzone_target: 'input' }, id: "image-upload" %>
            <div class="dropzone-msg dz-message needsclick">
              <i class="bi bi-cloud-upload fa-3x"></i>
              <p class="dropzone-msg-title">Browse/Drag File to Upload</p>
            </div>
          </div>
          <div id="uploaded-images-preview" class="d-flex flex-wrap mt-2">
            <!-- Thumbnails for preview -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Confirm</button>
      </div>
    </div>
  </div>
</div>

<% end %>


<style>
  /* Style for the Quill toolbar */
  .ql-toolbar {
    border-radius: 10px 10px 0 0; /* Round the top two corners */
    border: 1px solid #ccc; /* Match the border style of the editor */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Optional shadow */
  }

  /* Style for the Quill editor container */
  .ql-container {
    border-radius: 0 0 10px 10px; /* Round the bottom two corners */
    border: 1px solid #ccc; /* Match the border style of the toolbar */
    border-top: none; /* Remove the border between the toolbar and editor */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Optional shadow */
  }

  /* Ensure stars are evenly spaced and clickable with no gaps */
  #star-rating {
    display: inline-flex; /* Align stars horizontally with no whitespace */
    gap: 0; /* Remove extra space between stars */
  }

  #star-rating .bi-star, #star-rating .bi-star-fill {
    margin: 0; /* Remove any internal margin */
    padding: 0; /* Remove internal padding */
    width: 40px; /* Set a fixed width for each star */
    height: 40px; /* Set a fixed height for each star */
    display: flex; /* Ensure each star takes up its full box */
    align-items: center; /* Center the star icon vertically */
    justify-content: center; /* Center the star icon horizontally */
    transition: color 0.2s ease, transform 0.2s ease; /* Smooth hover effect */
    color: #ccc; /* Default gray color for unselected stars */
  }

  #star-rating .bi-star:hover, #star-rating .bi-star-fill:hover {
    transform: scale(1.1); /* Slightly enlarge on hover */
  }

  #star-rating .bi-star-fill {
    color: gold; /* Gold color for selected stars */
  }

</style>

<script>
  document.addEventListener("turbo:load", () => {
  const quillEditor = document.getElementById("quill-editor");
  const modalElement = document.getElementById("dropzoneModal");
  let quill; // Declare quill globally

  if (quillEditor && !quillEditor.classList.contains("quill-initialized")) {
    quill = new Quill(quillEditor, {
      theme: "snow",
      placeholder: "Write your review here...",
      modules: {
        toolbar: [
          ["bold", "italic", "underline", { list: "ordered" }, { list: "bullet" }],
          ["image"],
        ],
      },
    });

    quillEditor.classList.add("quill-initialized");

    const toolbar = quill.getModule("toolbar");
    toolbar.addHandler("image", () => {
      const modalInstance = new bootstrap.Modal(modalElement);
      modalInstance.show();
    });
  }

  const reviewForm = document.getElementById("review-form");

  // Handle form submit and set the content from Quill editor
  reviewForm.addEventListener("submit", (event) => {
    // Prevent form from submitting before we update the hidden field
    event.preventDefault();

    // Update the hidden field with Quill's content (HTML)
    const quillContent = quill.root.innerHTML;
    document.getElementById("quill-content").value = quillContent;

    // Now submit the form
    reviewForm.submit();
  });
});


</script>

<script>
document.addEventListener("turbo:load", () => {
  const dropzoneModal = document.getElementById("dropzoneModal");
  const reviewForm = document.getElementById("review-form");
  const uploadedImagesField = document.getElementById("uploaded-images-json");
  const previewContainer = document.getElementById("uploaded-images-preview");

  let uploadedImageUrls = [];
  Dropzone.autoDiscover = false; // Disable auto-discovery of dropzones.

  // Initialize Dropzone only when the modal is shown.
  if (dropzoneModal) {
    const myDropzone = new Dropzone("#review-dropzone", {
      url: "/uploads",
      paramName: "file",
      maxFilesize: 2,
      acceptedFiles: "image/*",
      maxFiles: 10,
      addRemoveLinks: true,
      headers: {
        "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
      },
      success: function(file, response) {
        if (response.image_url) {
          uploadedImageUrls.push(response.image_url);
          updateImageField();
        }
      },
      removedfile: function(file) {
        const previewElement = file.previewElement;
        if (previewElement != null) {
          previewElement.parentNode.removeChild(previewElement);
        }
        uploadedImageUrls = uploadedImageUrls.filter(url => !file.xhr || !file.xhr.response.includes(url));
        updateImageField();
      },
    });

    // Reinitialize Dropzone each time the modal is shown.
    dropzoneModal.addEventListener("shown.bs.modal", () => {
      if (Dropzone.instances.length === 0) {
        // Ensure Dropzone is initialized again when the modal is shown.
        new Dropzone("#review-dropzone", myDropzone.options);
      }
    });

    // Ensure Dropzone instance is removed when modal is hidden
    dropzoneModal.addEventListener("hidden.bs.modal", () => {
      Dropzone.instances.forEach(instance => instance.destroy()); // Destroy all instances.
    });
  }

  // Updating the image field with URLs
  function updateImageField() {
    uploadedImagesField.value = JSON.stringify(uploadedImageUrls);
  }

  // Handle form submit and set the content from Quill editor
  reviewForm.addEventListener("submit", () => {
    // Update the image field with any uploaded images
    updateImageField();
    
    // Get the Quill instance using the Quill editor element
    const quill = Quill.find(document.getElementById("quill-editor"));

    // Update the hidden field with Quill's content (HTML)
    document.getElementById("quill-content").value = quill.root.innerHTML;
  });
});

</script>




<script>
  document.addEventListener("turbo:load", () => {
    const starRating = document.getElementById("star-rating");
    if (starRating) {
      const stars = starRating.querySelectorAll(".bi-star");
      const ratingInput = document.getElementById("rating-input");

      // Highlight stars based on rating
      const highlightStars = (rating) => {
        stars.forEach((star, index) => {
          if (index < rating) {
            star.classList.remove("bi-star");
            star.classList.add("bi-star-fill");
            star.style.color = "gold"; // Fill with gold
          } else {
            star.classList.remove("bi-star-fill");
            star.classList.add("bi-star");
            star.style.color = "#ccc"; // Gray for unselected stars
          }
        });
      };

      // Handle mouse enter and leave (hover effects)
      stars.forEach((star, index) => {
        star.addEventListener("mouseenter", () => highlightStars(index + 1)); // Highlight stars up to the hovered one
        star.addEventListener("mouseleave", () => highlightStars(parseInt(ratingInput.value, 10) || 0)); // Restore to current rating
      });

      // Handle star click (set rating)
      stars.forEach((star, index) => {
        star.addEventListener("click", () => {
          const rating = index + 1;
          ratingInput.value = rating; // Update hidden input value
          highlightStars(rating); // Update the star UI
        });
      });

      // Set initial rating
      const initialRating = parseInt(starRating.getAttribute("data-selected-rating"), 10) || 0;
      highlightStars(initialRating);
    }
  });
</script>

<script>
document.addEventListener("turbo:load", () => {
  const submitButton = document.querySelector("#review-form .submit-button");
  const quillEditor = document.querySelector("#quill-editor");
  const ratingInput = document.getElementById("rating-input");

  let quill;

  // Only initialize Quill once
  if (quillEditor && !quillEditor.classList.contains("quill-initialized")) {
    quill = new Quill(quillEditor, {
      theme: "snow",
      placeholder: "Write your review here...",
      modules: {
        toolbar: [
          ["bold", "italic", "underline", { list: "ordered" }, { list: "bullet" }],
          ["image"],
        ],
      },
    });

    quillEditor.classList.add("quill-initialized");
  } else {
    quill = Quill.find(quillEditor);
  }

  function validateForm() {
    const content = quill.root.innerText.trim(); // Check text (not HTML)
    const rating = parseInt(ratingInput.value);

    if (content && rating > 0) {
      submitButton.disabled = false;
    } else {
      submitButton.disabled = true;
    }
  }

  // Monitor changes in the Quill editor
  quill.on('text-change', () => {
    validateForm();
  });

  // Monitor rating selection
  const stars = document.querySelectorAll("#star-rating .bi");
  stars.forEach(star => {
    star.addEventListener("click", () => {
      const rating = parseInt(star.dataset.value);
      ratingInput.value = rating;

      stars.forEach((s, i) => {
        if (i < rating) {
          s.classList.remove("bi-star");
          s.classList.add("bi-star-fill");
          s.style.color = "gold";
        } else {
          s.classList.remove("bi-star-fill");
          s.classList.add("bi-star");
          s.style.color = "#ccc";
        }
      });

      validateForm();
    });
  });

  // Initial validation on page load
  validateForm();
});
</script>
